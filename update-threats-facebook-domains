#!/usr/bin/env python

import facebook
import json
import sys
import time
import threatgraph

# Information about me, the prober
my_probe="fb-dm-v0"
my_probe_time=1
probe_id = "facebook-domain"

# Blacklist source info
src = "facebook.com"
tp = "blacklist"

# Get Threat Graph
g = threatgraph.Gaffer()

# Get Facebook creds
creds = json.loads(open("facebook-creds").read())
fb = facebook.Facebook(creds["id"], creds["secret"])

# Get list of all domains which need to be updated.
domains = g.get_all_domains()
seen_domains = g.get_probed_domains(my_probe)
domains = domains - seen_domains

# Function allows management in chunks
def chunks(l, n):
    n = max(1, n)
    return (l[i:i+n] for i in xrange(0, len(l), n))

# Iterate over domains
for domain in domains:

    print domain
    
    try:
        res = fb.get_domain_report(domain)

    except Exception, e:
        print e
        sys.exit(1)

    # Initialise graph elements
    elts = []

    print res

    # Iterate over threat data
    for threat in res["data"]:

        # Blacklist name
        bl, prob, id, desc, status, severity, pub = fb.parse_threat(threat)
            
        # Create a blacklist match edge
        elt = g.make_match_edge(domain, bl, id=id, description=desc,
                                status=status, severity=severity)
        elts.append(elt)

        print "Blaclist = ", bl
        print "Probability = ", prob

        # Create a blacklist entity (probably exists already)
        elt = g.make_blacklist_entity(bl, prob, tp, src, pub)
        elts.append(elt)

    # Create a probed edge
    elt = g.make_probed_edge(domain, probe_id, my_probe, my_probe_time)
    elts.append(elt)

    # Turn element list into a Gaffer operation
    elts = {
        "class": "uk.gov.gchq.gaffer.operation.impl.add.AddElements",
        "validate": True,
        "skipInvalidElements": False,
        "input": elts
    }

    # Execute Gaffer insert
    url = "/rest/v2/graph/operations/execute"
    data = json.dumps(elts)
    response = g.post(url, data)

    # If status code is bad, fail
    if response.status_code != 200:
        print response.text

    time.sleep(0.01)

