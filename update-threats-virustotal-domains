#!/usr/bin/env python

from virus_total_apis import PrivateApi as VirusTotalPrivateApi
import json
import sys
import time
import threatgraph
import datetime

# Information about me, the prober
my_probe="vt-dm-v0"
my_probe_time=1
probe_id = "virustotal-domain"

# Blacklist source info
src = "virustotal.com"
pub = "virustotal.com"
tp = "scan"

# Get Threat Graph
g = threatgraph.Gaffer()

# Get VT creds
api_key = open("virustotal-key").read().lstrip().rstrip()
vt = VirusTotalPrivateApi(api_key)

# Get list of all domains which need to be updated.
domains = g.get_all_domains()
seen_domains = g.get_probed_domains(my_probe)
domains = domains - seen_domains

# Iterate over domains
for domain in domains:

    print domain
    
    try:
        res = vt.get_domain_report(domain)
        dets = res.get("results", {}).get("detected_urls", [])

    except Exception, e:
        print "Exception", e
        sys.exit(1)

    elts = []

    for det in dets:
        print det
        tm = det["scan_date"]
        tm = datetime.datetime.strptime(tm, "%Y-%m-%d %H:%M:%S")
        tm = time.mktime(tm.timetuple())

        # Blacklist name
        bl = "vt." + det["url"]
        prob = 0.1
        id = det["url"]
        desc = "VirusTotal hit on %s" % det["url"]
            
        # Create a blacklist match edge
        elt = g.make_match_edge(domain, bl, id=id, description=desc, time=tm)
        elts.append(elt)

        print "Blacklist = ", bl
        print "Probability = ", prob
        print "Description = ", desc

        # Create a blacklist entity (probably exists already)
        elt = g.make_blacklist_entity(bl, prob, tp, src, pub, time=tm)
        elts.append(elt)

    # Create a probed edge
    elt = g.make_probed_edge(domain, probe_id, my_probe, my_probe_time)
    elts.append(elt)

    # Turn element list into a Gaffer operation
    elts = {
        "class": "uk.gov.gchq.gaffer.operation.impl.add.AddElements",
        "validate": True,
        "skipInvalidElements": False,
        "input": elts
    }
    
    # Execute Gaffer insert
    url = "/rest/v2/graph/operations/execute"
    data = json.dumps(elts)
    response = g.post(url, data)

    # If status code is bad, fail
    if response.status_code != 200:
        print response.text

