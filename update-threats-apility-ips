#!/usr/bin/env python

import apility
import json
import sys
from gaffer import Gaffer
import sets
import os
import time
import threatgraph

my_probe="ap-ip-v0"
my_probe_time=1

src, pub = ("apility.io", "apility.io")
probe_id = "apility-io"
tp = "blacklist"
prob = 0.3

# Get Threat Graph
g = threatgraph.Gaffer()

# Get Apility UUID and get connection
uuid = open("apility-uuid").read().lstrip().rstrip()
a = apility.Apility(uuid)

ips = g.get_all_ips()
seen_ips = g.get_probed_ips(my_probe)
ips = ips - seen_ips
ips = g.remove_private_ips(ips)

# Function allows management in chunks
def chunks(l, n):
    l = list(l)
    n = max(1, n)
    return (l[i:i+n] for i in xrange(0, len(l), n))

for chunk in chunks(ips, 50):

    print chunk
    
    try:
        res = a.get_ip_reputation(chunk)

    except Exception, e:
        print e
        sys.exit(1)

    rep = {}

    for v in res:
        ip = v["ip"]
        blacks = v["blacklists"]
        rep[ip] = blacks

    elts = []

    for ip in rep:
        for bl in rep[ip]:

            blacklist = "apility." + bl
            
            elt = g.make_match_edge(ip, blacklist)
            elts.append(elt)

            elt = g.make_blacklist_entity(blacklist, prob, tp, src, pub)
            elts.append(elt)
        
        elt = g.make_probed_edge(ip, probe_id, my_probe, my_probe_time)
        elts.append(elt)

    if len(elts) > 0:

        elts = {
            "class": "uk.gov.gchq.gaffer.operation.impl.add.AddElements",
            "validate": True,
            "skipInvalidElements": False,
            "input": elts
        }

        url = "/rest/v2/graph/operations/execute"
        data = json.dumps(elts)
        response = g.post(url, data)

        if response.status_code != 200:
            print response.text
            sys.exit(1)

    time.sleep(1)

